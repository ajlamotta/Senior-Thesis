import numpy as np

def haar_orthogonal(N):
    """
    Generates an N x N Haar-distributed orthogonal matrix using QR decomposition.
    """
    X = np.random.randn(N, N)
    Q, R = np.linalg.qr(X)
    # Adjust Q by the signs of the diagonal of R to ensure uniform distribution
    d = np.diag(R)
    Q *= np.sign(d)
    return Q

def simulate_higher_moments(N, num_samples=10000, moment_orders=[1,2,3,4,5,6]):
    """
    Simulates higher moments of the entries of A = O^T Λ O.
    
    Parameters:
      N : int
          Dimension of the matrices.
      num_samples : int
          Number of Monte Carlo samples.
      moment_orders : list of int
          The orders of the moments to compute.
    
    The function computes the sample averages of (a[0,0])^k (a diagonal entry)
    and (a[0,1])^k (an off-diagonal entry) for each k in moment_orders.
    
    Since the entries of Λ are O(1), the moments of A should remain O(1).
    """
    # Create a fixed diagonal matrix Λ with entries sampled uniformly from [-1, 1] (O(1))
    lambda_vals = np.random.uniform(-1, 1, size=N)
    Lambda = np.diag(lambda_vals)
    
    # Dictionaries to accumulate moments for a diagonal and an off-diagonal entry
    moments_diag = {k: 0.0 for k in moment_orders}
    moments_offdiag = {k: 0.0 for k in moment_orders}
    
    for _ in range(num_samples):
        O = haar_orthogonal(N)
        A = O.T @ Lambda @ O
        
        # Select a diagonal entry and an off-diagonal entry
        diag_val = A[0,0]
        offdiag_val = A[0,1]
        
        # Accumulate powers
        for k in moment_orders:
            moments_diag[k] += diag_val**k
            moments_offdiag[k] += offdiag_val**k
    
    # Compute the sample averages
    for k in moment_orders:
        moments_diag[k] /= num_samples
        moments_offdiag[k] /= num_samples
    
    print("Higher moments for the diagonal entry a[0,0]:")
    for k in moment_orders:
        print(f"  E[(a[0,0])^{k}] = {moments_diag[k]}")
    print("\nHigher moments for the off-diagonal entry a[0,1]:")
    for k in moment_orders:
        print(f"  E[(a[0,1])^{k}] = {moments_offdiag[k]}")

# Example usage:
simulate_higher_moments(N=50, num_samples=10000, moment_orders=[1,2,3,4,5,6])